"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π Telegram.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π.
"""

import logging
import json
import hmac
import hashlib
from aiohttp import web
from datetime import datetime, timedelta
import database
from bot import bot, generate_and_send_pdf

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
PAYMENT_TOKEN_SECRET = "YOUR_PAYMENT_SECRET_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ production


async def verify_telegram_payment(request):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram Payments API.
    
    Args:
        request: aiohttp Request –æ–±—ä–µ–∫—Ç
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –ø–æ–¥–ª–∏–Ω–Ω—ã–π, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        data = await request.json()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Bot-Api-Secret-Token
        if 'X-Telegram-Bot-Api-Secret-Token' not in request.headers:
            logger.warning("Missing X-Telegram-Bot-Api-Secret-Token header")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        secret_token = request.headers['X-Telegram-Bot-Api-Secret-Token']
        if not hmac.compare_digest(secret_token, PAYMENT_TOKEN_SECRET):
            logger.warning("Invalid secret token")
            return False
            
        return True
    except Exception as e:
        logger.error(f"Error verifying payment: {e}")
        return False


async def handle_successful_payment(payment_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂.
    
    Args:
        payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Telegram
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        telegram_payment_charge_id = payment_data.get('telegram_payment_charge_id')
        provider_payment_charge_id = payment_data.get('provider_payment_charge_id')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Invoice payload
        if 'invoice_payload' not in payment_data:
            logger.error("No invoice_payload in payment data")
            return False
            
        # –†–∞–∑–±–æ—Ä payload
        payload = json.loads(payment_data['invoice_payload'])
        user_id = payload.get('user_id')
        product_type = payload.get('product_type')
        order_id = payload.get('order_id')
        
        if not all([user_id, product_type, order_id]):
            logger.error(f"Missing required fields in payload: {payload}")
            return False
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
        await database.update_order_status(
            order_id=order_id,
            status='paid',
            telegram_payment_charge_id=telegram_payment_charge_id,
            provider_payment_charge_id=provider_payment_charge_id
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        if product_type == 'full_report':
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF –æ—Ç—á–µ—Ç–∞
            await generate_and_send_pdf(user_id)
            
        elif product_type == 'compatibility':
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await generate_and_send_pdf(user_id, report_type='compatibility')
            
        elif product_type == 'subscription_month':
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            trial_end = datetime.now()
            next_charge = trial_end + timedelta(days=30)
            
            await database.create_subscription(
                user_id=user_id,
                status='active',
                trial_end=trial_end,
                next_charge=next_charge,
                provider_id=provider_payment_charge_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            user_data = await database.get_user(user_id)
            tg_id = user_data.get('tg_id')
            if tg_id:
                await bot.send_message(
                    tg_id,
                    "üåü –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ "
                    "–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã. –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π."
                )
        
        return True
        
    except Exception as e:
        logger.error(f"Error processing successful payment: {e}")
        return False


async def handle_payment_webhook(request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram Payments API.
    
    Args:
        request: aiohttp Request –æ–±—ä–µ–∫—Ç
        
    Returns:
        aiohttp.web.Response
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –≤–µ–±—Ö—É–∫–∞
    if not await verify_telegram_payment(request):
        return web.Response(status=401, text="Unauthorized")
        
    try:
        data = await request.json()
        logger.info(f"Received payment webhook: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        if 'update_id' in data and 'message' in data:
            message = data['message']
            if 'successful_payment' in message:
                payment_data = message['successful_payment']
                
                if await handle_successful_payment(payment_data):
                    return web.Response(status=200, text="Payment processed successfully")
                else:
                    return web.Response(status=500, text="Error processing payment")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        return web.Response(status=200, text="Notification received")
        
    except Exception as e:
        logger.error(f"Error in payment webhook handler: {e}")
        return web.Response(status=500, text=f"Error: {str(e)}")


async def setup_payment_webhook_server(host='0.0.0.0', port=8080):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π.
    
    Args:
        host: –•–æ—Å—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        port: –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    """
    app = web.Application()
    app.router.add_post('/payment', handle_payment_webhook)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host, port)
    
    logger.info(f"Starting payment webhook server on {host}:{port}")
    await site.start()
    
    return runner